from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel

from libs.llm_chat import create_chain, check_question

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
app = FastAPI()


# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
class QuestionRequest(BaseModel):
    user_id: str
    question: str


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞
chain = create_chain()


@app.post("/ask")
async def ask_question(request: QuestionRequest):
    user_id = request.user_id
    question = check_question(request.question)
    if question == '–æ–ø–µ—Ä–∞—Ç–æ—Ä':
        return JSONResponse(content={"response": '–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...'})
    elif question == '—Å–ø–∞—Å–∏–±–æ':
        return JSONResponse(content={"response": '–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! –ñ–µ–ª–∞–µ–º –í–∞–º –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –¥–æ–±—Ä–æ–≥–æ! üíö'})

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏
    try:

        response_content = chain.invoke({"input": question}, config={"configurable": {"session_id": user_id}})['answer']

        return JSONResponse(content={"response": response_content})

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
