import os

from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel

from libs.llm_chat import create_chain, check_question, create_chain_no_memory

description = """
## –í–µ—Ä—Å–∏–∏
### 0.0.1
- –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.
- –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç "—Å–ø–∞—Å–∏–±–æ" –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
### 0.0.2
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –±–µ–∑ —É—á—ë—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è —Ç–µ—Å—Ç–æ–≤).
"""

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
app = FastAPI(
    title="–ß–∞—Ç-–±–æ—Ç API –ñ–∏–∑–Ω—å–º–∞—Ä—Ç",
    version="0.0.2",
    description=description)


# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
class QuestionRequest(BaseModel):
    user_id: str
    question: str


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–µ–∫—Ç–æ—Ä—Å—Ç–æ—Ä–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
bk_path = "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ñ–µ–π–∫.pdf"
vec_store_save_path = "faik_FAISS_store.db"

if not os.path.exists(vec_store_save_path):
    from vectorstore import make_vectorstore
    make_vectorstore(bk_path, vec_store_save_path)

del bk_path, vec_store_save_path

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞
chain = create_chain()
chain_no_memory = create_chain_no_memory()


@app.post("/ask_mistral_7b_instruct")
async def ask_mistral_7b_instruct(request: QuestionRequest):
    """
    –û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í –ø—Ä–æ–º—Ç –∏–¥—ë—Ç –≤—Å—è –ø—Ä–æ—à–ª–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞.
    :param request:
    :return:
    """
    user_id = request.user_id
    question = check_question(request.question)
    if question == '–æ–ø–µ—Ä–∞—Ç–æ—Ä':
        return JSONResponse(content={"response": '–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...'})
    elif question == '—Å–ø–∞—Å–∏–±–æ':
        return JSONResponse(content={"response": '–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! –ñ–µ–ª–∞–µ–º –í–∞–º –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –¥–æ–±—Ä–æ–≥–æ! üíö'})

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏
    try:

        response_content = chain.invoke({"input": question}, config={"configurable": {"session_id": user_id}})['answer']

        return JSONResponse(content={"response": response_content})

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/ask_mistral_7b_instruct_no_memory")
async def ask_mistral_7b_instruct(request: QuestionRequest):
    """
    –û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –±–µ–∑ —É—á—ë—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å, –∫–∞–∫ –ø–µ—Ä–≤—ã–π.
    :param request:
    :return:
    """
    # user_id = request.user_id
    question = check_question(request.question)
    if question == '–æ–ø–µ—Ä–∞—Ç–æ—Ä':
        return JSONResponse(content={"response": '–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...'})
    elif question == '—Å–ø–∞—Å–∏–±–æ':
        return JSONResponse(content={"response": '–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! –ñ–µ–ª–∞–µ–º –í–∞–º –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –¥–æ–±—Ä–æ–≥–æ! üíö'})

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏
    try:

        response_content = chain_no_memory.invoke({"input": question})['answer']

        return JSONResponse(content={"response": response_content})

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
